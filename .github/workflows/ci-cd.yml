name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: test-api
  ECS_SERVICE: test-service
  ECS_CLUSTER: test-cluster
  ECS_TASK_DEFINITION: test-api
  CONTAINER_NAME: test-api

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'
          
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          
      - name: Install dependencies
        run: poetry install
        
      - name: Run tests
        run: poetry run pytest

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Get Secret ARN
        id: get-secret
        run: |
          SECRET_ARN=$(aws secretsmanager describe-secret --secret-id test-api-key --query 'ARN' --output text)
          echo "secret-arn=$SECRET_ARN" >> $GITHUB_OUTPUT

      - name: Update ECS task definition
        id: task-def
        run: |
          TASK_DEFINITION_ARN=$(aws ecs register-task-definition \
            --family test-api \
            --network-mode awsvpc \
            --requires-compatibilities FARGATE \
            --cpu 1024 \
            --memory 2048 \
            --execution-role-arn arn:aws:iam::542267705028:role/test-ecs-execution-role \
            --task-role-arn arn:aws:iam::542267705028:role/test-ecs-task-role \
            --container-definitions '[{
              "name": "test-api",
              "image": "${{ steps.build-image.outputs.image }}",
              "portMappings": [{"containerPort": 4000, "protocol": "tcp"}],
              "essential": true,
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/test-api",
                  "awslogs-region": "us-east-1",
                  "awslogs-stream-prefix": "ecs"
                }
              },
              "secrets": [
                {
                  "name": "API_KEY",
                  "valueFrom": "${{ steps.get-secret.outputs.secret-arn }}:API_KEY::"
                }
              ]
            }]' | jq -r .taskDefinition.taskDefinitionArn)
          echo "task-definition=$TASK_DEFINITION_ARN" >> $GITHUB_OUTPUT
          
      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --task-definition ${{ steps.task-def.outputs.task-definition }} \
            --desired-count 2 \
            --force-new-deployment 